{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sujungchoi/Desktop/\\uD83D\\uDC69\\u200D\\uD83D\\uDCBBCodingDojo/MERN/Full_Stack_MERN/authors/client/src/components/AuthorForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { navigate } from '@reach/router'; // eslint-disable-next-line\n\nexport default _s(() => {\n  _s();\n\n  //keep track of what is being typed via useState hook\n  const [name, setName] = useState(\"\");\n  const [errors, setErrors] = useState([]); //handler when the form is submitted\n\n  const onSubmitHandler = e => {\n    //prevent default behavior of the submit\n    e.preventDefault(); //make a post request to create a new person\n\n    axios.post('http://localhost:8001/api/authors/new', {\n      name\n    }).then(res => {\n      console.log(res);\n      navigate(\"/\");\n    }).catch(err => {\n      console.log(err);\n      const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n\n      const errorArr = [];\n\n      for (const key of Object.keys(errorResponse)) {\n        // Loop through all errors and get the messages\n        errorArr.push(errorResponse[key].message);\n      }\n\n      setErrors(errorArr);\n    });\n  }; //onChange to update firstName and lastName\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: onSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 42\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}, \"20LVdTiEz9Nm/NSJEhCFC8jDb9o=\"); // import React, { useState } from 'react'\n// import axios from 'axios';\n// // import { Link, navigate } from '@reach/router';\n// // eslint-disable-next-line\n// export default (props) => {\n//     const { initialName } = props;\n//     //keep track of what is being typed via useState hook\n//     const [ authors, setAuthors ] = useState([]);\n//     const [name, setName] = useState(initialName);\n//     // const [errors, setErrors] = useState([]); \n//     const createAuthor = author => {\n//     axios.post('http://localhost:8001/api/authors/new', author)\n//         .then(res=>{\n//             console.log(res, \"** New author created\")\n//             //updating state after api call => re-render the page; show the new product created without having to refresh the page\n//             // setAuthors([...authors, res.data]);\n//         })\n//         .catch(err=>{ console.log(err)\n//             const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n//             const errorArr = []; \n//             for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n//                 errorArr.push(errorResponse[key].message)\n//             }\n//             setErrors(errorArr);\n//         })  \n//     //handler when the form is submitted\n//     const onSubmitHandler = e => {\n//         e.preventDefault();\n//         //creating onSubmit method that takes in name as an object\n//         createAuthor({ name });\n//         setName(\"\");\n//     }\n//     return (\n//         <div>\n//             {/* <h1>Favorite Authors</h1>\n//             <h5><Link to='/'> Home </Link></h5>\n//             <h4>Add a new author:</h4> */}\n// {/* \n//             {errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n//              */}\n//             <form className=\"formGroup\" onSubmit={onSubmitHandler}>\n//                 <div className=\"form-group\">\n//                     <label HtmlFor=\"name\">Name:</label>\n//                     <input type=\"text\" \n//                     onChange={(e) => setName(e.target.value)} \n//                     value={name} \n//                     className=\"form-control\" id=\"name\" placeholder=\"ex) Hemmingway\" />\n//                 </div>\n//                 <div>\n//                     <button class=\"btn btn-primary\">Cancel</button>\n//                     <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n//                 </div>\n//             </form>\n//         </div>\n//     )\n// }\n// }","map":{"version":3,"sources":["/Users/sujungchoi/Desktop/👩‍💻CodingDojo/MERN/Full_Stack_MERN/authors/client/src/components/AuthorForm.jsx"],"names":["React","useState","axios","navigate","name","setName","errors","setErrors","onSubmitHandler","e","preventDefault","post","then","res","console","log","catch","err","errorResponse","response","data","errorArr","key","Object","keys","push","message","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,eAAvB,C,CAEI;;AACJ,kBAAe,MAAM;AAAA;;AACjB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC,CAHiB,CAIjB;;AACA,QAAMO,eAAe,GAAGC,CAAC,IAAI;AACzB;AACAA,IAAAA,CAAC,CAACC,cAAF,GAFyB,CAGzB;;AACAR,IAAAA,KAAK,CAACS,IAAN,CAAW,uCAAX,EAAoD;AAChDP,MAAAA;AADgD,KAApD,EAGKQ,IAHL,CAGUC,GAAG,IAAG;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAV,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACH,KANL,EAOKa,KAPL,CAOWC,GAAG,IAAE;AAAEH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACV,YAAMC,aAAa,GAAGD,GAAG,CAACE,QAAJ,CAAaC,IAAb,CAAkBd,MAAxC,CADQ,CACwC;;AAChD,YAAMe,QAAQ,GAAG,EAAjB;;AACA,WAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYN,aAAZ,CAAlB,EAA8C;AAAE;AAC5CG,QAAAA,QAAQ,CAACI,IAAT,CAAcP,aAAa,CAACI,GAAD,CAAb,CAAmBI,OAAjC;AACH;;AACDnB,MAAAA,SAAS,CAACc,QAAD,CAAT;AACH,KAdL;AAgBH,GApBD,CALiB,CA0BjB;;;AACA,sBACI;AAAM,IAAA,QAAQ,EAAEb,eAAhB;AAAA,4BACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAC6B;AAAA;AAAA;AAAA;AAAA,cAD7B,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAKC,CAAD,IAAKJ,OAAO,CAACI,CAAC,CAACkB,MAAF,CAASC,KAAV;AAA3C;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAO,MAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CApCD,kC,CAuCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react'\nimport axios from 'axios';\nimport {navigate} from '@reach/router'\n\n    // eslint-disable-next-line\nexport default () => {\n    //keep track of what is being typed via useState hook\n    const [name, setName] = useState(\"\"); \n    const [errors, setErrors] = useState([]);\n    //handler when the form is submitted\n    const onSubmitHandler = e => {\n        //prevent default behavior of the submit\n        e.preventDefault();\n        //make a post request to create a new person\n        axios.post('http://localhost:8001/api/authors/new', {\n            name\n        })\n            .then(res=> {\n                console.log(res)\n                navigate(\"/\")\n            })\n            .catch(err=>{ console.log(err)\n                const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n                const errorArr = []; \n                for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n                    errorArr.push(errorResponse[key].message)\n                }\n                setErrors(errorArr);\n            })  \n            \n    }\n    //onChange to update firstName and lastName\n    return (\n        <form onSubmit={onSubmitHandler}>\n            <p>\n                <label>First Name</label><br/>\n                <input type=\"text\" onChange = {(e)=>setName(e.target.value)}/>\n            </p>\n            <input type=\"submit\"/>\n        </form>\n    )\n}\n\n\n// import React, { useState } from 'react'\n// import axios from 'axios';\n// // import { Link, navigate } from '@reach/router';\n\n// // eslint-disable-next-line\n// export default (props) => {\n//     const { initialName } = props;\n//     //keep track of what is being typed via useState hook\n//     const [ authors, setAuthors ] = useState([]);\n//     const [name, setName] = useState(initialName);\n//     // const [errors, setErrors] = useState([]); \n\n\n//     const createAuthor = author => {\n//     axios.post('http://localhost:8001/api/authors/new', author)\n//         .then(res=>{\n//             console.log(res, \"** New author created\")\n//             //updating state after api call => re-render the page; show the new product created without having to refresh the page\n//             // setAuthors([...authors, res.data]);\n//         })\n//         .catch(err=>{ console.log(err)\n//             const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n//             const errorArr = []; \n//             for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n//                 errorArr.push(errorResponse[key].message)\n//             }\n//             setErrors(errorArr);\n//         })  \n\n//     //handler when the form is submitted\n//     const onSubmitHandler = e => {\n//         e.preventDefault();\n//         //creating onSubmit method that takes in name as an object\n//         createAuthor({ name });\n//         setName(\"\");\n//     }\n\n//     return (\n\n//         <div>\n\n//             {/* <h1>Favorite Authors</h1>\n\n//             <h5><Link to='/'> Home </Link></h5>\n//             <h4>Add a new author:</h4> */}\n// {/* \n//             {errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n//              */}\n//             <form className=\"formGroup\" onSubmit={onSubmitHandler}>\n//                 <div className=\"form-group\">\n//                     <label HtmlFor=\"name\">Name:</label>\n//                     <input type=\"text\" \n//                     onChange={(e) => setName(e.target.value)} \n//                     value={name} \n//                     className=\"form-control\" id=\"name\" placeholder=\"ex) Hemmingway\" />\n//                 </div>\n//                 <div>\n//                     <button class=\"btn btn-primary\">Cancel</button>\n//                     <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n//                 </div>\n//             </form>\n//         </div>\n//     )\n// }\n// }\n"]},"metadata":{},"sourceType":"module"}