[{"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/index.js":"1","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/App.js":"2","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/reportWebVitals.js":"3","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Error.jsx":"4","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Main.jsx":"5","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Create.jsx":"6","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Update.jsx":"7","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Detail.jsx":"8","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/components/ProjectForm.jsx":"9","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/services/projects.js":"10","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/services/index.js":"11"},{"size":501,"mtime":1631916698176,"results":"12","hashOfConfig":"13"},{"size":629,"mtime":1631918287421,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1631856817499,"results":"15","hashOfConfig":"13"},{"size":497,"mtime":1631856817500,"results":"16","hashOfConfig":"13"},{"size":3458,"mtime":1631918443507,"results":"17","hashOfConfig":"13"},{"size":2221,"mtime":1631942358053,"results":"18","hashOfConfig":"13"},{"size":2506,"mtime":1631917474129,"results":"19","hashOfConfig":"13"},{"size":1103,"mtime":1631868254617,"results":"20","hashOfConfig":"13"},{"size":4770,"mtime":1631942366468,"results":"21","hashOfConfig":"13"},{"size":966,"mtime":1631941781237,"results":"22","hashOfConfig":"13"},{"size":501,"mtime":1631941491119,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j7zugz",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/index.js",[],"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/App.js",[],"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/reportWebVitals.js",[],"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Error.jsx",[],"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Main.jsx",[],"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Create.jsx",["50","51","52"],"import React, {useState} from 'react';\nimport { Link, navigate, Redirect } from '@reach/router';\nimport { createProject } from '../services/projects';\nimport ProjectForm from '../components/ProjectForm';\n\n\nconst Create = (props) => {\n  // const [isSubmitted, setIsSubmitted] = useState(false);\n  // if (isSubmitted) return <Redirect to=\"/\" />\n\n  return (\n    <div className=\"createPage\">\n    <h1>Work in Progress</h1>\n    <h5><Link to='/'> Home </Link></h5>\n    <h4 style={{\"color\": \"rgb(107, 106, 106)\"}}>Add a new project:</h4>\n\n    <ProjectForm \n      onSubmitProp={createProject} \n      initialName=\"\"  \n      initialImageURL=\"\" \n      initialPatternLocation=\"\"\n      initialDescription=\"\"\n      initialHookSize=\"\"\n      initialYarnInfo=\"\"\n     />\n  </div>\n  )\n}\n\nexport default Create\n\n\n// ** backup; before making separate services folder for axios calls\n\n// import React, {useState} from 'react';\n// import { Link, navigate } from '@reach/router';\n// import axios from 'axios';\n// import ProjectForm from '../components/ProjectForm';\n\n// // eslint-disable-next-line\n// export default () => {\n//   const [errors, setErrors] = useState([]); \n\n//   const createProject = (project) => {\n//     axios.post(`http://localhost:8000/api/projects/new`, project)\n//     .then(res=> {\n//         console.log(res)\n//         navigate(\"/\")\n//     })\n//     .catch(err=>{ console.log(err)\n//       const errorResponse = err.response.data.errors; \n//       const errorArr = []; \n//       for (const key of Object.keys(errorResponse)) { \n//           errorArr.push(errorResponse[key].message)\n//       }\n//       setErrors(errorArr);\n//   });\n// }\n\n\n//   return (\n//     <div className=\"createPage\">\n//       <h1>Work in Progress</h1>\n//       <h5><Link to='/'> Home </Link></h5>\n//       <h4 style={{\"color\": \"rgb(107, 106, 106)\"}}>Add a new project:</h4>\n//       {errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n//       <ProjectForm \n//         onSubmitProp={createProject} \n//         initialName=\"\"  \n//         initialImageURL=\"\" \n//         initialPatternLocation=\"\"\n//         initialDescription=\"\"\n//         initialHookSize=\"\"\n//         initialYarnInfo=\"\" />\n//     </div>\n//   );\n// }\n","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Update.jsx",["53"],"import React, {useState, useEffect} from 'react';\nimport { Link, navigate } from '@reach/router';\nimport axios from 'axios';\nimport ProjectForm from '../components/ProjectForm';\n\n// eslint-disable-next-line\nexport default (props) => {\n\n    const [project, setProject] = useState(); \n    const [loaded, setLoaded] = useState(false);\n    const [errors, setErrors] = useState([]); \n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/projects/${props.id}` )\n            .then(res => {\n                setProject(res.data);\n                setLoaded(true);\n            })\n            .catch(err=> {\n                console.log(err.response)\n                navigate(\"/error\")\n            })\n    }, [])\n\n    const updateProject = project => {\n        axios.put(`http://localhost:8000/api/projects/${props.id}`, project)\n            .then(res => {\n                console.log(res)\n                // navigate to the main page after updating the form\n                navigate(\"/\")\n            })\n            // can I set two conditionals under .catch?? \n            // does it have to be under .put or can it be .get of edit page?\n            .catch(err=>{ console.log(err.response)\n                const errorResponse = err.response.data.errors; \n                const errorArr = []; \n                for (const key of Object.keys(errorResponse)) { \n                    errorArr.push(errorResponse[key].message)\n                }\n                setErrors(errorArr);\n            });\n    }\n\n  return (\n    <div className=\"updatePage\">\n\n{errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n      <h1>Favorite projects</h1>\n      <h5><Link to='/'> Home </Link></h5>\n      <h4 style={{\"color\": \"rgb(107, 106, 106)\"}}>Edit this project:</h4>\n\n        {loaded && (\n        <ProjectForm \n            onSubmitProp={updateProject}\n            initialName={project.name}\n            initialGenre={project.genre}\n            initialDesc={project.desc}\n            initialImageURL={project.imageURL}\n            initialPatternLocation={project.patternLocation}\n            initialDescription={project.description} \n            initialHookSize={project.hookSize} \n            initialYarnInfo={project.yarnInfo}\n        />)}\n      \n\n    </div>\n  );\n}\n\n\n// https://mongoosejs.com/docs/api.html#model_Model.update\n// [options.runValidators=false] «Boolean» if true, runs update validators on this command. Update validators validate the update operation against the model's schema.","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/views/Detail.jsx",["54","55"],"import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport { Link, navigate } from '@reach/router';\n\n// eslint-disable-next-line\nexport default (props) => {\n    // for GET request\n    const [project, setProject] = useState();\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/projects/${props.id}`)\n            .then(res => {\n                setProject(res.data)\n                setLoaded(true);\n            })\n            .catch(err => console.log(err));\n    }, [])\n\n\n    return (\n        <div>\n            {loaded && (\n            <div>\n            <h1 style={{\"marginBottom\":\"20px\"}}>{project.name}</h1>\n            <h4>Genre: {project.genre}</h4>\n            <h4>Notes: {project.desc}</h4>\n            {/* <h4>Description: {author.description}</h4> */}\n            <div className=\"edit_delete\">\n                <h5><Link to={\"/edit/\" + project._id }>EDIT</Link></h5>\n\n            </div>\n\n            <h5><Link to='/'> Back to Main Page </Link></h5>\n            </div>\n            )}\n        </div>\n    )\n}\n","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/components/ProjectForm.jsx",["56"],"import React, { useState } from 'react'\nimport { Link } from '@reach/router'\nimport { Button, Form } from 'semantic-ui-react';\n\n    // eslint-disable-next-line\nexport default (props) => {\n    const { errors, initialName, initialImageURL, initialPatternLocation,initialDescription, initialHookSize, initialYarnInfo, onSubmitProp } = props;\n    //keep track of what is being typed via useState hook\n    const [name, setName] = useState(initialName); \n    const [imageURL, setImageURL] = useState(initialImageURL); \n    const [patternLocation, setPatternLocation] = useState(initialPatternLocation); \n    const [hookSize, setHookSize] = useState(initialHookSize); \n    const [yarnInfo, setYarnInfo] = useState(initialYarnInfo); \n    const [description, setDescription] = useState(initialDescription); \n    // const [isSubmitted, setIsSubmitted] = useState(false);\n\n    //handler when the form is submitted\n    const onSubmitHandler = e => {\n        //prevent default behavior of the submit\n        e.preventDefault();\n        //make a post request to create a new person\n        onSubmitProp({name, imageURL, patternLocation, description, hookSize, yarnInfo});\n        // setName(\"\");\n        // setIsSubmitted(true);\n    }\n\n    return (\n\n        <Form onSubmit={onSubmitHandler}>\n        <Form.Input \n            label='Name (*required)' \n            type=\"text\" \n            onChange={(e) => setName(e.target.value)} \n            value={name} \n        />\n        <Form.Input \n            label='Image URL' \n            type=\"text\" \n            onChange={(e) => setImageURL(e.target.value)} \n            value={imageURL} \n        />\n        <Form.Input \n            label='Pattern Location' \n            type=\"text\" \n            onChange={(e) => setPatternLocation(e.target.value)} \n            value={patternLocation} \n        />\n        <Form.Group widths='equal'>\n            <Form.Input fluid label='Hook Size' type=\"text\" onChange={(e) => setHookSize(e.target.value)} value={hookSize} />\n            <Form.Input fluid label='Yarn Info' type=\"text\" onChange={(e) => setYarnInfo(e.target.value)} value={yarnInfo} />\n        </Form.Group>\n        <Form.TextArea \n            label='About' \n            placeholder='Anything else you want to add?' \n            onChange={(e) => setDescription(e.target.value)} \n            value={description} \n        />\n\n            <div className=\"form-buttons\">\n                {/* <Button basic color='green'><Link style={{\"color\": \"white\"}} to='/'> Cancel </Link></Button>\n                <Button type=\"submit\" basic color='blue'>Submit</Button> */}\n                <Button className=\"green\"><Link style={{\"color\": \"white\"}} to='/'> Cancel </Link></Button>\n                <Button className=\"yellow\" style={{ \"marginTop\": \"10px\" }}>Submit</Button>\n            </div>\n        </Form>\n\n    )\n}\n\n// backup\n// import React, { useState } from 'react'\n// import axios from 'axios';\n// import {navigate, Link} from '@reach/router'\n\n//     // eslint-disable-next-line\n// export default () => {\n//     //keep track of what is being typed via useState hook\n//     const [name, setName] = useState(\"\"); \n//     const [errors, setErrors] = useState([]);\n//     //handler when the form is submitted\n//     const onSubmitHandler = e => {\n//         //prevent default behavior of the submit\n//         e.preventDefault();\n//         //make a post request to create a new person\n//         axios.post('http://localhost:8001/api/authors/new', {name})\n//             .then(res=> {\n//                 console.log(res)\n//                 navigate(\"/\")\n//             })\n//             .catch(err=>{ console.log(err)\n//                 const errorResponse = err.response.data.errors; \n//                 const errorArr = []; \n//                 for (const key of Object.keys(errorResponse)) { \n//                     errorArr.push(errorResponse[key].message)\n//                 }\n//                 setErrors(errorArr);\n//             });\n//     }\n\n//     return (\n\n//         <form className=\"formGroup\" onSubmit={onSubmitHandler}>\n\n//             {errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n\n//             <div className=\"form-group\">\n//                 <label HtmlFor=\"name\">Name:</label>\n//                 <input type=\"text\" \n//                 onChange={(e) => setName(e.target.value)} \n//                 value={name} \n//                 className=\"form-control\" id=\"name\" placeholder=\"ex) Ernest Hemingway\" />\n//             </div>\n//             <div>\n//                 <button class=\"btn btn-primary\"><Link style={{\"color\": \"white\"}} to='/'> Cancel </Link></button>\n//                 <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n//             </div>\n//         </form>\n\n//     )\n// }\n","/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/services/projects.js",[],"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/services/index.js",[],{"ruleId":"57","severity":1,"message":"58","line":1,"column":16,"nodeType":"59","messageId":"60","endLine":1,"endColumn":24},{"ruleId":"57","severity":1,"message":"61","line":2,"column":16,"nodeType":"59","messageId":"60","endLine":2,"endColumn":24},{"ruleId":"57","severity":1,"message":"62","line":2,"column":26,"nodeType":"59","messageId":"60","endLine":2,"endColumn":34},{"ruleId":"63","severity":1,"message":"64","line":23,"column":8,"nodeType":"65","endLine":23,"endColumn":10,"suggestions":"66"},{"ruleId":"57","severity":1,"message":"61","line":3,"column":16,"nodeType":"59","messageId":"60","endLine":3,"endColumn":24},{"ruleId":"63","severity":1,"message":"64","line":18,"column":8,"nodeType":"65","endLine":18,"endColumn":10,"suggestions":"67"},{"ruleId":"57","severity":1,"message":"68","line":7,"column":13,"nodeType":"59","messageId":"60","endLine":7,"endColumn":19},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'navigate' is defined but never used.","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array.","ArrayExpression",["69"],["70"],"'errors' is assigned a value but never used.",{"desc":"71","fix":"72"},{"desc":"71","fix":"73"},"Update the dependencies array to be: [props.id]",{"range":"74","text":"75"},{"range":"76","text":"75"},[710,712],"[props.id]",[556,558]]