{"ast":null,"code":"var _jsxFileName = \"/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/components/ProjectForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from '@reach/router';\nimport { Button, Form } from 'semantic-ui-react'; // eslint-disable-next-line\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(props => {\n  _s();\n\n  const {\n    initialName,\n    initialImageURL,\n    initialPatternLocation,\n    initialDescription,\n    initialHookSize,\n    initialYarnInfo,\n    onSubmitProp\n  } = props; //keep track of what is being typed via useState hook\n\n  const [name, setName] = useState(initialName);\n  const [imageURL, setImageURL] = useState(initialImageURL);\n  const [patternLocation, setPatternLocation] = useState(initialPatternLocation);\n  const [hookSize, setHookSize] = useState(initialHookSize);\n  const [yarnInfo, setYarnInfo] = useState(initialYarnInfo);\n  const [description, setDescription] = useState(initialDescription); // const [desc, setDesc] = useState(initialDesc); \n  // const [genre, setGenre] = useState(initialGenre); \n  // const [errors, setErrors] = useState([]);\n  //handler when the form is submitted\n\n  const onSubmitHandler = e => {\n    //prevent default behavior of the submit\n    e.preventDefault(); //make a post request to create a new person\n\n    onSubmitProp({\n      name,\n      imageURL,\n      patternLocation,\n      description,\n      hookSize,\n      yarnInfo\n    });\n    setName(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n      label: \"Name (*required)\",\n      type: \"text\",\n      onChange: e => setName(e.target.value),\n      value: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n      label: \"Image URL\",\n      type: \"text\",\n      onChange: e => setImageURL(e.target.value),\n      value: imageURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n      label: \"Pattern Location\",\n      type: \"text\",\n      onChange: e => setPatternLocation(e.target.value),\n      value: patternLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        fluid: true,\n        label: \"Hook Size\",\n        type: \"text\",\n        onChange: e => setHookSize(e.target.value),\n        value: hookSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        fluid: true,\n        label: \"Yarn Info\",\n        type: \"text\",\n        onChange: e => setYarnInfo(e.target.value),\n        value: yarnInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n      label: \"About\",\n      placeholder: \"Anything else you want to add?\",\n      onChange: e => setDescription(e.target.value),\n      value: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"green\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          style: {\n            \"color\": \"white\"\n          },\n          to: \"/\",\n          children: \" Cancel \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"yellow\",\n        style: {\n          \"marginTop\": \"10px\"\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}, \"vtaDQXtomILLVsYJGRIABzs6P98=\"); // backup\n// import React, { useState } from 'react'\n// import axios from 'axios';\n// import {navigate, Link} from '@reach/router'\n//     // eslint-disable-next-line\n// export default () => {\n//     //keep track of what is being typed via useState hook\n//     const [name, setName] = useState(\"\"); \n//     const [errors, setErrors] = useState([]);\n//     //handler when the form is submitted\n//     const onSubmitHandler = e => {\n//         //prevent default behavior of the submit\n//         e.preventDefault();\n//         //make a post request to create a new person\n//         axios.post('http://localhost:8001/api/authors/new', {name})\n//             .then(res=> {\n//                 console.log(res)\n//                 navigate(\"/\")\n//             })\n//             .catch(err=>{ console.log(err)\n//                 const errorResponse = err.response.data.errors; \n//                 const errorArr = []; \n//                 for (const key of Object.keys(errorResponse)) { \n//                     errorArr.push(errorResponse[key].message)\n//                 }\n//                 setErrors(errorArr);\n//             });\n//     }\n//     return (\n//         <form className=\"formGroup\" onSubmit={onSubmitHandler}>\n//             {errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n//             <div className=\"form-group\">\n//                 <label HtmlFor=\"name\">Name:</label>\n//                 <input type=\"text\" \n//                 onChange={(e) => setName(e.target.value)} \n//                 value={name} \n//                 className=\"form-control\" id=\"name\" placeholder=\"ex) Ernest Hemingway\" />\n//             </div>\n//             <div>\n//                 <button class=\"btn btn-primary\"><Link style={{\"color\": \"white\"}} to='/'> Cancel </Link></button>\n//                 <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n//             </div>\n//         </form>\n//     )\n// }","map":{"version":3,"sources":["/Users/sujungchoi/Desktop/Coding/projects/crochet/wip/client/src/components/ProjectForm.jsx"],"names":["React","useState","Link","Button","Form","props","initialName","initialImageURL","initialPatternLocation","initialDescription","initialHookSize","initialYarnInfo","onSubmitProp","name","setName","imageURL","setImageURL","patternLocation","setPatternLocation","hookSize","setHookSize","yarnInfo","setYarnInfo","description","setDescription","onSubmitHandler","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Link } from '@reach/router'\nimport { Button, Form } from 'semantic-ui-react';\n\n    // eslint-disable-next-line\nexport default (props) => {\n    const { initialName, initialImageURL, initialPatternLocation,initialDescription, initialHookSize, initialYarnInfo, onSubmitProp } = props;\n    //keep track of what is being typed via useState hook\n    const [name, setName] = useState(initialName); \n    const [imageURL, setImageURL] = useState(initialImageURL); \n    const [patternLocation, setPatternLocation] = useState(initialPatternLocation); \n    const [hookSize, setHookSize] = useState(initialHookSize); \n    const [yarnInfo, setYarnInfo] = useState(initialYarnInfo); \n    const [description, setDescription] = useState(initialDescription); \n    // const [desc, setDesc] = useState(initialDesc); \n    // const [genre, setGenre] = useState(initialGenre); \n    // const [errors, setErrors] = useState([]);\n    //handler when the form is submitted\n    const onSubmitHandler = e => {\n        //prevent default behavior of the submit\n        e.preventDefault();\n        //make a post request to create a new person\n        onSubmitProp({name, imageURL, patternLocation, description, hookSize, yarnInfo});\n        setName(\"\");\n    }\n\n    return (\n\n        <Form onSubmit={onSubmitHandler}>\n\n        <Form.Input \n            label='Name (*required)' \n            type=\"text\" \n            onChange={(e) => setName(e.target.value)} \n            value={name} \n        />\n        <Form.Input \n            label='Image URL' \n            type=\"text\" \n            onChange={(e) => setImageURL(e.target.value)} \n            value={imageURL} \n        />\n        <Form.Input \n            label='Pattern Location' \n            type=\"text\" \n            onChange={(e) => setPatternLocation(e.target.value)} \n            value={patternLocation} \n        />\n        <Form.Group widths='equal'>\n            <Form.Input fluid label='Hook Size' type=\"text\" onChange={(e) => setHookSize(e.target.value)} value={hookSize} />\n            <Form.Input fluid label='Yarn Info' type=\"text\" onChange={(e) => setYarnInfo(e.target.value)} value={yarnInfo} />\n        </Form.Group>\n        <Form.TextArea \n            label='About' \n            placeholder='Anything else you want to add?' \n            onChange={(e) => setDescription(e.target.value)} \n            value={description} \n        />\n\n            <div className=\"form-buttons\">\n                {/* <Button basic color='green'><Link style={{\"color\": \"white\"}} to='/'> Cancel </Link></Button>\n                <Button type=\"submit\" basic color='blue'>Submit</Button> */}\n                <Button className=\"green\"><Link style={{\"color\": \"white\"}} to='/'> Cancel </Link></Button>\n                <Button className=\"yellow\" style={{ \"marginTop\": \"10px\" }}>Submit</Button>\n            </div>\n        </Form>\n\n    )\n}\n\n// backup\n// import React, { useState } from 'react'\n// import axios from 'axios';\n// import {navigate, Link} from '@reach/router'\n\n//     // eslint-disable-next-line\n// export default () => {\n//     //keep track of what is being typed via useState hook\n//     const [name, setName] = useState(\"\"); \n//     const [errors, setErrors] = useState([]);\n//     //handler when the form is submitted\n//     const onSubmitHandler = e => {\n//         //prevent default behavior of the submit\n//         e.preventDefault();\n//         //make a post request to create a new person\n//         axios.post('http://localhost:8001/api/authors/new', {name})\n//             .then(res=> {\n//                 console.log(res)\n//                 navigate(\"/\")\n//             })\n//             .catch(err=>{ console.log(err)\n//                 const errorResponse = err.response.data.errors; \n//                 const errorArr = []; \n//                 for (const key of Object.keys(errorResponse)) { \n//                     errorArr.push(errorResponse[key].message)\n//                 }\n//                 setErrors(errorArr);\n//             });\n//     }\n\n//     return (\n\n//         <form className=\"formGroup\" onSubmit={onSubmitHandler}>\n\n//             {errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n\n//             <div className=\"form-group\">\n//                 <label HtmlFor=\"name\">Name:</label>\n//                 <input type=\"text\" \n//                 onChange={(e) => setName(e.target.value)} \n//                 value={name} \n//                 className=\"form-control\" id=\"name\" placeholder=\"ex) Ernest Hemingway\" />\n//             </div>\n//             <div>\n//                 <button class=\"btn btn-primary\"><Link style={{\"color\": \"white\"}} to='/'> Cancel </Link></button>\n//                 <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n//             </div>\n//         </form>\n\n//     )\n// }\n"]},"metadata":{},"sourceType":"module"}