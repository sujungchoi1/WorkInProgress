{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sujungchoi/Desktop/\\uD83D\\uDC69\\u200D\\uD83D\\uDCBBCodingDojo/MERN/Full_Stack_MERN/authors/client/src/components/AuthorForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; // import { Link, navigate } from '@reach/router';\n// eslint-disable-next-line\n\nexport default _s(props => {\n  _s();\n\n  const {\n    initialName\n  } = props; //keep track of what is being typed via useState hook\n\n  const [authors, setAuthors] = useState([]);\n  const [name, setName] = useState(initialName); // const [errors, setErrors] = useState([]); \n\n  const createAuthor = author => {\n    axios.post('http://localhost:8001/api/authors/new', author).then(res => {\n      console.log(res, \"** New author created\"); //updating state after api call => re-render the page; show the new product created without having to refresh the page\n      // setAuthors([...authors, res.data]);\n    }).catch(err => {\n      console.log(err); // const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n      // const errorArr = []; \n      // for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n      //     errorArr.push(errorResponse[key].message)\n      // }\n      // setErrors(errorArr);\n    }); //handler when the form is submitted\n\n    const onSubmitHandler = e => {\n      e.preventDefault(); //creating onSubmit method that takes in name as an object\n\n      createAuthor({\n        name\n      });\n      setName(\"\");\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"formGroup\",\n        onSubmit: onSubmitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            HtmlFor: \"name\",\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: e => setName(e.target.value),\n            value: name,\n            className: \"form-control\",\n            id: \"name\",\n            placeholder: \"ex) Hemmingway\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn btn-primary\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            class: \"btn btn-primary\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this);\n  };\n}, \"WYAfcipSw0iSPd/Ac44kTmYtjaE=\");","map":{"version":3,"sources":["/Users/sujungchoi/Desktop/👩‍💻CodingDojo/MERN/Full_Stack_MERN/authors/client/src/components/AuthorForm.jsx"],"names":["React","useState","axios","props","initialName","authors","setAuthors","name","setName","createAuthor","author","post","then","res","console","log","catch","err","onSubmitHandler","e","preventDefault","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AACA,kBAAgBC,KAAD,IAAW;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAkBD,KAAxB,CADsB,CAEtB;;AACA,QAAM,CAAEE,OAAF,EAAWC,UAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACG,WAAD,CAAhC,CAJsB,CAKtB;;AAGA,QAAMK,YAAY,GAAGC,MAAM,IAAI;AAC/BR,IAAAA,KAAK,CAACS,IAAN,CAAW,uCAAX,EAAoDD,MAApD,EACKE,IADL,CACUC,GAAG,IAAE;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,uBAAjB,EADO,CAEP;AACA;AACH,KALL,EAMKG,KANL,CAMWC,GAAG,IAAE;AAAEH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,EAAF,CACR;AACA;AACA;AACA;AACA;AACA;AACH,KAbL,EAD+B,CAgB/B;;AACA,UAAMC,eAAe,GAAGC,CAAC,IAAI;AACzBA,MAAAA,CAAC,CAACC,cAAF,GADyB,CAEzB;;AACAX,MAAAA,YAAY,CAAC;AAAEF,QAAAA;AAAF,OAAD,CAAZ;AACAC,MAAAA,OAAO,CAAC,EAAD,CAAP;AACH,KALD;;AAOA,wBAEI;AAAA,6BASI;AAAM,QAAA,SAAS,EAAC,WAAhB;AAA4B,QAAA,QAAQ,EAAEU,eAAtC;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACI;AAAO,YAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,IAAI,EAAC,MAAZ;AACA,YAAA,QAAQ,EAAGC,CAAD,IAAOX,OAAO,CAACW,CAAC,CAACE,MAAF,CAASC,KAAV,CADxB;AAEA,YAAA,KAAK,EAAEf,IAFP;AAGA,YAAA,SAAS,EAAC,cAHV;AAGyB,YAAA,EAAE,EAAC,MAH5B;AAGmC,YAAA,WAAW,EAAC;AAH/C;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AAAA,kCACI;AAAQ,YAAA,KAAK,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,KAAK,EAAC,iBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AA0BH,GAlDG;AAmDH,CA3DD","sourcesContent":["import React, { useState } from 'react'\nimport axios from 'axios';\n// import { Link, navigate } from '@reach/router';\n\n// eslint-disable-next-line\nexport default (props) => {\n    const { initialName } = props;\n    //keep track of what is being typed via useState hook\n    const [ authors, setAuthors ] = useState([]);\n    const [name, setName] = useState(initialName);\n    // const [errors, setErrors] = useState([]); \n\n\n    const createAuthor = author => {\n    axios.post('http://localhost:8001/api/authors/new', author)\n        .then(res=>{\n            console.log(res, \"** New author created\")\n            //updating state after api call => re-render the page; show the new product created without having to refresh the page\n            // setAuthors([...authors, res.data]);\n        })\n        .catch(err=>{ console.log(err)\n            // const errorResponse = err.response.data.errors; // Get the errors from err.response.data\n            // const errorArr = []; \n            // for (const key of Object.keys(errorResponse)) { // Loop through all errors and get the messages\n            //     errorArr.push(errorResponse[key].message)\n            // }\n            // setErrors(errorArr);\n        })  \n\n    //handler when the form is submitted\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        //creating onSubmit method that takes in name as an object\n        createAuthor({ name });\n        setName(\"\");\n    }\n\n    return (\n\n        <div>\n\n            {/* <h1>Favorite Authors</h1>\n\n            <h5><Link to='/'> Home </Link></h5>\n            <h4>Add a new author:</h4> */}\n{/* \n            {errors.map((err, index) => <p style={{\"color\": \"red\"}} key={index}> {err} </p>)}\n             */}\n            <form className=\"formGroup\" onSubmit={onSubmitHandler}>\n                <div className=\"form-group\">\n                    <label HtmlFor=\"name\">Name:</label>\n                    <input type=\"text\" \n                    onChange={(e) => setName(e.target.value)} \n                    value={name} \n                    className=\"form-control\" id=\"name\" placeholder=\"ex) Hemmingway\" />\n                </div>\n                <div>\n                    <button class=\"btn btn-primary\">Cancel</button>\n                    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n}\n"]},"metadata":{},"sourceType":"module"}